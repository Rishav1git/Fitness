{"mappings":"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","sources":["js/script.js"],"sourcesContent":["// HTML elements\r\nconst videoElement = document.getElementById('webcam');\r\nconst canvasElement = document.getElementById('threeCanvas');\r\ncanvasElement.width = 640;\r\ncanvasElement.height = 480;\r\n\r\n// 3D scene setup\r\nconst scene = new THREE.Scene();\r\nconst camera = new THREE.PerspectiveCamera(75, canvasElement.width / canvasElement.height, 0.1, 1000);\r\nconst renderer = new THREE.WebGLRenderer({ canvas: canvasElement, alpha: true });\r\nrenderer.setSize(canvasElement.width, canvasElement.height);\r\ncamera.position.z = 5;\r\n\r\n// Reward object (a rotating box)\r\nconst boxGeometry = new THREE.BoxGeometry();\r\nconst boxMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\nconst rewardBox = new THREE.Mesh(boxGeometry, boxMaterial);\r\nscene.add(rewardBox);\r\n\r\n// Track fitness activity\r\nlet squatDetected = false;\r\nlet jumpDetected = false;\r\nlet lungeDetected = false;\r\n\r\n// Load PoseNet model and initialize webcam\r\nasync function setupCameraAndModel() {\r\n    const net = await posenet.load();\r\n\r\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n    videoElement.srcObject = stream;\r\n\r\n    // Start detecting poses\r\n    detectPoses(net);\r\n}\r\n\r\n// Pose detection and movement tracking\r\nasync function detectPoses(net) {\r\n    videoElement.onloadeddata = async () => {\r\n        while (true) {\r\n            const pose = await net.estimateSinglePose(videoElement, { flipHorizontal: false });\r\n            if (pose.score > 0.5) {\r\n                trackMovement(pose);\r\n            }\r\n            render();\r\n            await tf.nextFrame();\r\n        }\r\n    };\r\n}\r\n\r\n// Movement tracking function\r\nfunction trackMovement(pose) {\r\n    const leftKnee = pose.keypoints.find(k => k.part === 'leftKnee');\r\n    const rightKnee = pose.keypoints.find(k => k.part === 'rightKnee');\r\n    const leftHip = pose.keypoints.find(k => k.part === 'leftHip');\r\n    const rightHip = pose.keypoints.find(k => k.part === 'rightHip');\r\n    const leftAnkle = pose.keypoints.find(k => k.part === 'leftAnkle');\r\n    const rightAnkle = pose.keypoints.find(k => k.part === 'rightAnkle');\r\n\r\n    if (leftKnee && rightKnee && leftHip && rightHip && leftAnkle && rightAnkle) {\r\n        const kneeY = (leftKnee.position.y + rightKnee.position.y) / 2;\r\n        const hipY = (leftHip.position.y + rightHip.position.y) / 2;\r\n        const ankleY = (leftAnkle.position.y + rightAnkle.position.y) / 2;\r\n\r\n        // Detect squat (hips below knees)\r\n        if (!squatDetected && hipY > kneeY + 50) {\r\n            squatDetected = true;\r\n            showReward(\"Squat detected!\");\r\n            setTimeout(() => { squatDetected = false; }, 2000); // Reset after 2 seconds\r\n        }\r\n\r\n        // Detect jump (ankles above knees)\r\n        if (!jumpDetected && ankleY < kneeY - 30) {\r\n            jumpDetected = true;\r\n            showReward(\"Jump detected!\");\r\n            setTimeout(() => { jumpDetected = false; }, 2000); // Reset after 2 seconds\r\n        }\r\n\r\n        // Detect lunge (distance between knees increases)\r\n        const kneeDistance = Math.abs(leftKnee.position.x - rightKnee.position.x);\r\n        if (!lungeDetected && kneeDistance > 100) {\r\n            lungeDetected = true;\r\n            showReward(\"Lunge detected!\");\r\n            setTimeout(() => { lungeDetected = false; }, 2000); // Reset after 2 seconds\r\n        }\r\n    }\r\n}\r\n\r\n// Display reward animation\r\nfunction showReward(message) {\r\n    console.log(message);\r\n    rewardBox.material.color.set(Math.random() * 0xffffff); // Change color\r\n}\r\n\r\n// Render 3D scene\r\nfunction render() {\r\n    rewardBox.rotation.x += 0.01;\r\n    rewardBox.rotation.y += 0.01;\r\n    renderer.render(scene, camera);\r\n}\r\n\r\n// Initialize camera and model\r\nsetupCameraAndModel();\r\n"],"names":[],"version":3,"file":"index.1c974c2f.js.map","sourceRoot":"/__parcel_source_root/"}